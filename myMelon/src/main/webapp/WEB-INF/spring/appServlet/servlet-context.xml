<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!--  코딩시 개발의 편리성을 위해 
		  Dynammic Web Project와 구조를 동일하게 변경한다
	<resources mapping="/resources/**" location="/resources/" />-->
	<default-servlet-handler/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 어노테이션 방식으로( @Controller, @Component) 자동으로 객체가 생성되려면 
		 해당 팩키지가 스캔되어야 한다 -->
	<!-- 예) HomeController 클래스, DBOpen 클래스 -->
	<context:component-scan base-package="kr.co.mymelon" />
	<context:component-scan base-package="net.utility" />
	
	<!-- 파일 전송이 있는 경우 스프링빈 등록 
		 CommonsMultipartResolver
		 폼에서 전송되어온 파일을 읽어서 MultipartRessolver객체로 변환-->
	<beans:bean id="multipartResolver" 
				class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	
	
	</beans:bean>
	
</beans:beans>
